苑一峰讲解oauth2地址:http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html

oauth2:
1.使用@EnableResourceServer声明一个资源服务器
2.使用@EnableAuthorizationServer声明一个认证服务器
  注意:资源服务器和认证服务器可在同一个项目中
3.oauth2客户端授权有四种模型
  3.1）授权码模式(authorization code)
       例子：有一个"云冲印"的网站，可以将用户储存在Google的照片，冲印出来
       步骤：a)用户访问"云冲刷"网站,讲用户导向Google认证服务器
            b)用户选择在Google认证页面选择是否给予"云冲刷"授权
            c)如果用户给予授权：认证服务器将用户导向客户端事先指定的"重定向URI"，同时附上授权码，“云冲刷”收到授权码，再附上“重定向URI”,向服务器申请令牌。这写步骤在后台服务器完成对用户不可见。
                              简单来说：用户选择授权后，经过两次交互，“云冲刷”网站申请到了进入“Google”服务器获取图片资源的令牌：访问令牌（access_token）和更新令牌（refresh_token）
       简单的说：“云冲刷”这个客户端想拿到“Google”中的图片资源，那么“Google”认证服务器就让用户给这个客户端授权，如果给了那么我就发放一些令牌给这个客户端,这个客户端通过这个令牌就能访问我的资源。

  3.2）简化模式(implicit)
       步骤：a)客户端将用户导向认证服务器
            b)用户决定是否给于客户端授权
            c)假设用户给予授权，认证服务器将用户导向客户端指定的"重定向URI"，并在URI的Hash部分包含了访问令牌
            d)浏览器向资源服务器发出请求，其中不包括上一步收到的Hash值
            e)资源服务器返回一个网页，其中包含的代码可以获取Hash值中的令牌
            f)浏览器执行上一步获得的脚本，提取出令牌
            g)浏览器将令牌发给客户端
       授权码模式和简化模式的区别？
            简化模式不通过第三方应用程序的服务器，直接在浏览器中向认证服务器申请令牌，跳过了"授权码"这个步骤，因此得名。所有步骤在浏览器中完成，令牌对访问者是可见的，且客户端不需要认证。
       简单的说：
            简化模式就是用户选择给客户端授权后直接就返回Hash值（令牌包含在其中）。这个Hash值还读取不了令牌。还需要请求资源服务器,通过返回的key去解析这串Hash得到最终的令牌。

  3.3）密码模式(resource owner password credentials)
        用户向客户端提供自己的用户名和密码。客户端使用这些信息，向"服务商提供商"索要授权。在这种模式中，用户必须把自己的密码给客户端，但是客户端不得储存密码。
        这通常用在用户对客户端高度信任的情况下，比如客户端是操作系统的一部分，或者由一个著名公司出品。而认证服务器只有在其他授权模式无法执行的情况下，才能考虑使用这种模式。
        （这种模式除非都是自己的系统，否则正常人为啥要把自己在“Google”的用户名密码提供给第三方？）
        步骤：a)用户向客户端提供用户名和密码
             b)客户端将用户名和密码发给认证服务器，向后者请求令牌
             c）认证服务器确认无误后，向客户端提供访问令牌
        简单的说：就是用户对“云冲刷”说，我把我的Google账号密码给你，你去把资源给我拿回来。

  3.4）客户端模式(client credentials)
       客户端模式指客户端以自己的名义，而不是以用户的名义，向"服务提供商"进行认证。严格地说，客户端模式并不属于OAuth框架所要解决的问题。在这种模式中，用户直接向客户端注册，客户端以自己的名义要求"服务提供商"提供服务，其实不存在授权问题。
       步骤：a)客户端向认证服务器进行身份认证，并要求一个访问令牌
            b)认证服务器确认无误后，向客户端提供访问令牌
       这种模式解决需解决：认证服务器必须以某种方式，验证客户端身份
       可能的一种方法：认证服务器记录可以访问的客户端ID?

4.更新令牌作用
  如果用户访问的时候，客户端的"访问令牌"已经过期，则需要使用"更新令牌"申请一个新的访问令牌

