<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cloud.auth.authserver.dao.inft.ISysCompanyDao">
    <resultMap id="BaseResultMap" type="com.cloud.auth.authserver.entity.SysCompany">
		<result column="sc_id" jdbcType="BIGINT" property="scId" />
		<result column="company_name" jdbcType="VARCHAR" property="companyName" />
		<result column="address" jdbcType="VARCHAR" property="address" />
		<result column="phone" jdbcType="VARCHAR" property="phone" />
		<result column="email" jdbcType="VARCHAR" property="email" />
		<result column="create_time" jdbcType="DATE" property="createTime" />
		<result column="status" jdbcType="TINYINT" property="status" />
		<result column="status_time" jdbcType="DATE" property="statusTime" />
    </resultMap>

    <sql id="where_sql">
        and 1=1
	    <if test="scId != null">
	       and sc_id = #{scId,jdbcType=BIGINT}
	    </if>
	    <if test="companyName != null">
	      <if test="companyNameEqual != null and companyNameEqual">
	         and company_name = #{companyName,jdbcType=VARCHAR}
	      </if>
	      <if test="companyNameEqual != null and not companyNameEqual">
	         <![CDATA[and company_name like CONCAT('%',#{companyName,jdbcType=VARCHAR} ,'%')]]>
	      </if>
	    </if>
	    <if test="address != null">
	      <if test="addressEqual != null and addressEqual">
	         and address = #{address,jdbcType=VARCHAR}
	      </if>
	      <if test="addressEqual != null and not addressEqual">
	         <![CDATA[and address like CONCAT('%',#{address,jdbcType=VARCHAR} ,'%')]]>
	      </if>
	    </if>
	    <if test="phone != null">
	      <if test="phoneEqual != null and phoneEqual">
	         and phone = #{phone,jdbcType=VARCHAR}
	      </if>
	      <if test="phoneEqual != null and not phoneEqual">
	         <![CDATA[and phone like CONCAT('%',#{phone,jdbcType=VARCHAR} ,'%')]]>
	      </if>
	    </if>
	    <if test="email != null">
	      <if test="emailEqual != null and emailEqual">
	         and email = #{email,jdbcType=VARCHAR}
	      </if>
	      <if test="emailEqual != null and not emailEqual">
	         <![CDATA[and email like CONCAT('%',#{email,jdbcType=VARCHAR} ,'%')]]>
	      </if>
	    </if>
	    <if test="createTimeStart != null">
	       and create_time &gt;= #{createTimeStart,jdbcType=DATE}
	    </if>
	    <if test="createTimeEnd != null">
	       and #{createTimeEnd,jdbcType=DATE} &gt;= create_time
	    </if>
	    <if test="status != null">
	       and status = #{status,jdbcType=TINYINT}
	    </if>
	    <if test="statusTimeStart != null">
	       and status_time &gt;= #{statusTimeStart,jdbcType=DATE}
	    </if>
	    <if test="statusTimeEnd != null">
	       and #{statusTimeEnd,jdbcType=DATE} &gt;= status_time
	    </if>
        <if test="inSql != null and inSql.size()>0">
            <foreach collection="inSql" item="intervalEntity" separator=" ">
                and ${intervalEntity.name} in
                <foreach collection="intervalEntity.list" item="item" separator="," open="(" close=")">
                    #{item}
                </foreach>
            </foreach>
        </if>
        <if test="notInSql != null and notInSql.size()>0">
            <foreach collection="notInSql" item="intervalEntity" separator=" ">
                and ${intervalEntity.name} not in
                <foreach collection="intervalEntity.list" item="item" separator="," open="(" close=")">
                    #{item}
                </foreach>
            </foreach>
        </if>
    </sql>

    <sql id="Example_Where_Clause">
      <foreach collection="criterias" item="criteria" separator=" ">
        <if test="criteria.valid">
            ${criteria.opt}
            <trim prefix="(" prefixOverrides="and|or" suffix=")">
                <foreach collection="criteria.criterions" item="criterion">
                  <choose>
                    <when test="criterion.noValue">
                        ${criterion.condition}
                    </when>
                    <when test="criterion.oneValue">
                        ${criterion.condition} #{criterion.value1}
                    </when>
                    <when test="criterion.secondValue">
                        ${criterion.condition} #{criterion.value1} and #{criterion.value2}
                    </when>
                    <when test="criterion.listValue">
                        ${criterion.condition}
                      <foreach collection="criterion.list" item="listItem" open="(" close=")" separator=",">
                        #{listItem}
                      </foreach>
                    </when>
                  </choose>
                </foreach>
            </trim>
        </if>
      </foreach>
   </sql>

    <sql id="Base_Column_List">
        sc_id,company_name,address,phone,email,
		create_time,status,status_time
    </sql>

    <sql id="Base_Object_List">
        #{scId},#{companyName},#{address},#{phone},#{email},
		#{createTime},#{status},#{statusTime}
    </sql>

    <sql id="Base_Item_List">
        #{item.scId},#{item.companyName},#{item.address},#{item.phone},#{item.email},
		#{item.createTime},#{item.status},#{item.statusTime}
    </sql>

     <!--获取最大的主键-->
    <select id="selectMaxSysCompanyId" resultType="java.lang.Long">
        select IFNULL(max(sc_id), 0) from `sys_company`
    </select>

    <!--根据主键获取对象-->
    <select id="loadSysCompanyByKey" resultMap="BaseResultMap">
        select <include refid="Base_Column_List" /> from sys_company
        <where>
            AND sc_id=#{scId}
        </where>
    </select>

    <!--插入对象-->
    <insert id="insertSysCompany">
        insert into sys_company(<include refid="Base_Column_List" />)
        values(<include refid="Base_Object_List" />)
    </insert>

    <!--批量插入对象-->
    <insert id="insertSysCompanyList">
        insert into sys_company(<include refid="Base_Column_List" />)
        values
        <foreach collection="list" index="index" item="item" separator=",">
            (<include refid="Base_Item_List" />)
        </foreach>
    </insert>

    <!--更新对象-->
    <update id="updateSysCompany">
        update sys_company
        <set>
			<if test="companyName != null">
				company_name = #{companyName},
			</if>
			<if test="address != null">
				address = #{address},
			</if>
			<if test="phone != null">
				phone = #{phone},
			</if>
			<if test="email != null">
				email = #{email},
			</if>
			<if test="createTime != null">
				create_time = #{createTime},
			</if>
			<if test="status != null">
				status = #{status},
			</if>
			<if test="statusTime != null">
				status_time = #{statusTime},
			</if>
        </set>
        <where>
            AND sc_id=#{scId}
        </where>
    </update>

    <!--批量更新对象-->
    <update id="updateSysCompanyList">
        <foreach collection="list" separator=";" item="item">
            update sys_company
            <set>
				<if test="item.companyName != null">
					company_name = #{item.companyName},
				</if>
				<if test="item.address != null">
					address = #{item.address},
				</if>
				<if test="item.phone != null">
					phone = #{item.phone},
				</if>
				<if test="item.email != null">
					email = #{item.email},
				</if>
				<if test="item.createTime != null">
					create_time = #{item.createTime},
				</if>
				<if test="item.status != null">
					status = #{item.status},
				</if>
				<if test="item.statusTime != null">
					status_time = #{item.statusTime},
				</if>
            </set>
            <where>
                AND sc_id=#{item.scId}
            </where>
        </foreach>
    </update>

    <!--更新对象:全更新-->
    <update id="fullUpdateSysCompany">
        update sys_company
        <set>
			company_name = #{companyName},
			address = #{address},
			phone = #{phone},
			email = #{email},
			create_time = #{createTime},
			status = #{status},
			status_time = #{statusTime},
        </set>
        <where>
            AND sc_id=#{scId}
        </where>
    </update>

    <!--批量更新对象:全更新-->
    <update id="fullUpdateSysCompanyList">
        <foreach collection="list" separator=";" item="item">
            update sys_company
            <set>
				company_name = #{item.companyName},
				address = #{item.address},
				phone = #{item.phone},
				email = #{item.email},
				create_time = #{item.createTime},
				status = #{item.status},
				status_time = #{item.statusTime},
            </set>
            <where>
                AND sc_id=#{item.scId}
            </where>
        </foreach>
    </update>

    <!--查询总数-->
    <select id="getSysCompanyCount" resultType="java.lang.Long">
        select count(*) from sys_company
        <where>
            <include refid="where_sql" />
        </where>
    </select>

    <!--查询和分页查询,区别在于page和pageSize是否为空-->
    <select id="getSysCompanyList" resultMap="BaseResultMap">
        select <include refid="Base_Column_List" /> from sys_company
        <where>
            <include refid="where_sql" />
        </where>
        <if test="page!=null and pageSize!=null and page!=-1" >
            limit #{index},#{pageSize}
        </if>
        <if test="orderByClause!=null and orderByClause!=''">
            order by ${orderByClause}
        </if>
    </select>

    <!--复杂查询获取总数-->
    <select id="getSysCompanyCountExample" resultType="java.lang.Long">
        select count(*) from sys_company
        <where>
            <include refid="Example_Where_Clause" />
        </where>
    </select>

    <!--复杂查询查询列表-->
    <select id="getSysCompanyListExample" resultMap="BaseResultMap">
        select <include refid="Base_Column_List" /> from sys_company
        <where>
            <include refid="Example_Where_Clause" />
        </where>
        <if test="page!=null and pageSize!=null and page!=-1" >
            limit #{index},#{pageSize}
        </if>
        <if test="orderByClause!=null and orderByClause!=''">
            order by ${orderByClause}
        </if>
    </select>

    <!--根据主键删除对象-->
    <delete id="deleteSysCompanyByKey">
        delete from sys_company
        <where>
            AND sc_id = #{scId}
        </where>
    </delete>

    <!-- 批量删除对象 -->
    <delete id="deleteSysCompanyList">
        delete from sys_company
        <where>
            sc_id in
            <foreach collection="list" open="(" close=")" separator="," item="item">
                #{item.scId}
            </foreach>
        </where>
    </delete>

    <!--根据ID列表获取记录列表-->
    <select id="findSysCompanyListByIds" resultMap="BaseResultMap">
        select <include refid="Base_Column_List" /> from sys_company
        <where>
            sc_id in
            <foreach collection="list" open="(" close=")" separator="," item="item">
                #{item}
            </foreach>
        </where>
    </select>

</mapper>

